// Code generated by tutone: DO NOT EDIT
package synthetics

// SyntheticsMonitorCreateErrorType - Types of errors that can be returned from a create monitor request
type SyntheticsMonitorCreateErrorType string

var SyntheticsMonitorCreateErrorTypeTypes = struct {
	// Received a request missing required fields or containing invalid data
	BAD_REQUEST SyntheticsMonitorCreateErrorType
	// An unknown error occured while processing request to mutate monitor
	INTERNAL_SERVER_ERROR SyntheticsMonitorCreateErrorType
	// Monitor not found for given guid (monitor does not exist on account or has already been deleted)
	NOT_FOUND SyntheticsMonitorCreateErrorType
	// Monitor tags were not udpated.
	TAGGING_ERROR SyntheticsMonitorCreateErrorType
	// User does not have authorization to perform monitor mutation.
	UNAUTHORIZED SyntheticsMonitorCreateErrorType
	// An unknown error occurred while processing request to create monitor
	UNKNOWN_ERROR SyntheticsMonitorCreateErrorType
}{
	// Received a request missing required fields or containing invalid data
	BAD_REQUEST: "BAD_REQUEST",
	// An unknown error occured while processing request to mutate monitor
	INTERNAL_SERVER_ERROR: "INTERNAL_SERVER_ERROR",
	// Monitor not found for given guid (monitor does not exist on account or has already been deleted)
	NOT_FOUND: "NOT_FOUND",
	// Monitor tags were not udpated.
	TAGGING_ERROR: "TAGGING_ERROR",
	// User does not have authorization to perform monitor mutation.
	UNAUTHORIZED: "UNAUTHORIZED",
	// An unknown error occurred while processing request to create monitor
	UNKNOWN_ERROR: "UNKNOWN_ERROR",
}

// SyntheticsMonitorPeriod - Enum of monitor period types
type SyntheticsMonitorPeriod string

var SyntheticsMonitorPeriodTypes = struct {
	// 10 minute monitor period
	EVERY_10_MINUTES SyntheticsMonitorPeriod
	// 12 hour monitor period (720 minutes)
	EVERY_12_HOURS SyntheticsMonitorPeriod
	// 15 minute monitor period
	EVERY_15_MINUTES SyntheticsMonitorPeriod
	// 30 minute monitor period
	EVERY_30_MINUTES SyntheticsMonitorPeriod
	// 5 minute monitor period
	EVERY_5_MINUTES SyntheticsMonitorPeriod
	// 6 hour monitor period (360 minutes)
	EVERY_6_HOURS SyntheticsMonitorPeriod
	// 1 day monitor period (1440 minutes)
	EVERY_DAY SyntheticsMonitorPeriod
	// 1 hour monitor period (60 minutes)
	EVERY_HOUR SyntheticsMonitorPeriod
	// 1 minute monitor period
	EVERY_MINUTE SyntheticsMonitorPeriod
}{
	// 10 minute monitor period
	EVERY_10_MINUTES: "EVERY_10_MINUTES",
	// 12 hour monitor period (720 minutes)
	EVERY_12_HOURS: "EVERY_12_HOURS",
	// 15 minute monitor period
	EVERY_15_MINUTES: "EVERY_15_MINUTES",
	// 30 minute monitor period
	EVERY_30_MINUTES: "EVERY_30_MINUTES",
	// 5 minute monitor period
	EVERY_5_MINUTES: "EVERY_5_MINUTES",
	// 6 hour monitor period (360 minutes)
	EVERY_6_HOURS: "EVERY_6_HOURS",
	// 1 day monitor period (1440 minutes)
	EVERY_DAY: "EVERY_DAY",
	// 1 hour monitor period (60 minutes)
	EVERY_HOUR: "EVERY_HOUR",
	// 1 minute monitor period
	EVERY_MINUTE: "EVERY_MINUTE",
}

// SyntheticsMonitorStatus - Run state of the monitor
type SyntheticsMonitorStatus string

var SyntheticsMonitorStatusTypes = struct {
	// Monitor disabled runs status of a monitor
	DISABLED SyntheticsMonitorStatus
	// Enabled status of a monitor
	ENABLED SyntheticsMonitorStatus
	// Alerts muted status of a monitor
	MUTED SyntheticsMonitorStatus
}{
	// Monitor disabled runs status of a monitor
	DISABLED: "DISABLED",
	// Enabled status of a monitor
	ENABLED: "ENABLED",
	// Alerts muted status of a monitor
	MUTED: "MUTED",
}

// SyntheticsCreateScriptAPIMonitorInput - The monitor input values needed to create a Script Api monitor
type SyntheticsCreateScriptAPIMonitorInput struct {
	// The locations the monitor will run from
	Locations SyntheticsScriptedMonitorLocationsInput `json:"locations,omitempty"`
	// The human readable identifier for the monitor
	Name string `json:"name"`
	// The interval at which the monitor runs in minutes
	Period SyntheticsMonitorPeriod `json:"period"`
	// The runtime that the monitor will use to run jobs
	Runtime SyntheticsRuntimeInput `json:"runtime,omitempty"`
	// The script that the monitor runs
	Script string `json:"script"`
	// The run state of the monitor
	Status SyntheticsMonitorStatus `json:"status"`
	// The tags that will be associated with the monitor
	Tags []SyntheticsTag `json:"tags,omitempty"`
}

// SyntheticsLocations - The location(s) from which the monitor runs
type SyntheticsLocations struct {
	// Existing private location(s) in which the monitor will run
	Private []string `json:"private,omitempty"`
	// Publicly available location(s) in which the monitor will run
	Public []string `json:"public,omitempty"`
}

// SyntheticsMonitorCreateError - Error object for Synthetics monitor creation request
type SyntheticsMonitorCreateError struct {
	// String description of error
	Description string `json:"description"`
	// Enum of error that was returned during monitor creation
	Type SyntheticsMonitorCreateErrorType `json:"type"`
}

// SyntheticsPrivateLocationInput - Information realating to a private location
type SyntheticsPrivateLocationInput struct {
	// The unique identifier for the Synthetics private location in New Relic
	GUID int `json:"guid"`
	// The location's Verified Script Execution password (Only necessary if Verified Script Execution is enabled for the location)
	VsePassword SecureValue `json:"vsePassword,omitempty"`
}

// SyntheticsRuntime - The runtime that a monitor runs
type SyntheticsRuntime struct {
	// The runtime type that the monitor will run
	RuntimeType string `json:"runtimeType,omitempty"`
	// The specific version of the runtime type selected
	RuntimeTypeVersion SemVer `json:"runtimeTypeVersion"`
	// The programing language that should execute the script
	ScriptLanguage string `json:"scriptLanguage,omitempty"`
}

// SyntheticsRuntimeInput - Input to determine which runtime the monitor will run
type SyntheticsRuntimeInput struct {
	// The runtime type that the monitor will run
	RuntimeType string `json:"runtimeType"`
	// The specific version of the runtime type selected
	RuntimeTypeVersion SemVer `json:"runtimeTypeVersion"`
	// The programing language that should execute the script
	ScriptLanguage string `json:"scriptLanguage,omitempty"`
}

// SyntheticsScriptAPIMonitor - A Script Api monitor resulting from a Script Api mutation
type SyntheticsScriptAPIMonitor struct {
	// The creation time of the monitor in millis
	CreatedAt EpochMilliseconds `json:"createdAt,omitempty"`
	// The unique client identifier for the Synthetics Monitor in New Relic
	GUID EntityGUID `json:"guid,omitempty"`
	// The locations the monitor runs from
	Locations SyntheticsLocations `json:"locations,omitempty"`
	// The last modification time of the monitor in millis
	ModifiedAt EpochMilliseconds `json:"modifiedAt,omitempty"`
	// The human readable identifier for the monitor
	Name string `json:"name,omitempty"`
	// The interval at which the monitor runs in minutes
	Period SyntheticsMonitorPeriod `json:"period,omitempty"`
	// The runtime that the monitor will use to run jobs
	Runtime SyntheticsRuntime `json:"runtime,omitempty"`
	// The run state of the monitor
	Status SyntheticsMonitorStatus `json:"status,omitempty"`
}

// SyntheticsScriptAPIMonitorCreateMutationResult - The result of a Script Api monitor create mutation
type SyntheticsScriptAPIMonitorCreateMutationResult struct {
	// Errors that occurred during Script Api monitor create mutation
	Errors []SyntheticsMonitorCreateError `json:"errors"`
	// The resulting Script Api monitor
	Monitor SyntheticsScriptAPIMonitor `json:"monitor,omitempty"`
}

// SyntheticsScriptedMonitorLocationsInput - The location(s) from which the scripted monitor runs.
type SyntheticsScriptedMonitorLocationsInput struct {
	// The private location(s) that the monitor will run jobs from
	Private []SyntheticsPrivateLocationInput `json:"private,omitempty"`
	// The public location(s) that the monitor will run jobs from
	Public []string `json:"public"`
}

// SyntheticsTag - Tag entries for the monitor
type SyntheticsTag struct {
	// Name of the tag key
	Key string `json:"key"`
	// Values associated with the tag key
	Values []string `json:"values"`
}

// EntityGUID - An encoded Entity GUID
type EntityGUID string

// EpochMilliseconds - The `EpochMilliseconds` scalar represents the number of milliseconds since the Unix epoch
type EpochMilliseconds string

// ID - The `ID` scalar type represents a unique identifier, often used to
// refetch an object or as key for a cache. The ID type appears in a JSON
// response as a String; however, it is not intended to be human-readable.
// When expected as an input type, any string (such as `"4"`) or integer
// (such as `4`) input value will be accepted as an ID.
type ID string

// SecureValue - The `SecureValue` scalar represents a secure value, ie a password, an API key, etc.
type SecureValue string

// SemVer - The `SemVer` scalar represents a version designation conforming to the SemVer specification.
type SemVer string
